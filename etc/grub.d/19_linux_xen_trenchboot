#! /bin/sh
set -e

# grub-mkconfig helper script.
# Copyright (C) 2006,2007,2008,2009,2010  Free Software Foundation, Inc.
# Copyright (C) 2023 3mdeb Sp. z o.o.
#
# GRUB is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# GRUB is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with GRUB.  If not, see <http://www.gnu.org/licenses/>.

prefix="/usr"
exec_prefix="/usr"
datarootdir="${prefix}/share"

. "/usr/share/grub/grub-mkconfig_lib"

export TEXTDOMAIN=grub
export TEXTDOMAINDIR="${datarootdir}/locale"

CLASS="--class gnu-linux --class gnu --class os --class xen"

if [ "x${GRUB_DISTRIBUTOR}" = "x" ] ; then
  OS="$(sed 's, release .*$,,g' /etc/system-release)"
else
  OS="${GRUB_DISTRIBUTOR}"
  CLASS="--class $(echo ${GRUB_DISTRIBUTOR} | tr 'A-Z' 'a-z' | cut -d' ' -f1) ${CLASS}"
fi

# loop-AES arranges things so that /dev/loop/X can be our root device, but
# the initrds that Linux uses don't like that.
case ${GRUB_DEVICE} in
  /dev/loop/*|/dev/loop[0-9])
    GRUB_DEVICE=`losetup ${GRUB_DEVICE} | sed -e "s/^[^(]*(\([^)]\+\)).*/\1/"`
  ;;
esac

if [ "x${GRUB_DEVICE_UUID}" = "x" ] || [ "x${GRUB_DISABLE_LINUX_UUID}" = "xtrue" ] \
    || ! test -e "/dev/disk/by-uuid/${GRUB_DEVICE_UUID}" \
    || uses_abstraction "${GRUB_DEVICE}" lvm; then
  LINUX_ROOT_DEVICE=${GRUB_DEVICE}
else
  LINUX_ROOT_DEVICE=UUID=${GRUB_DEVICE_UUID}
fi

# Allow overriding GRUB_CMDLINE_LINUX and GRUB_CMDLINE_LINUX_DEFAULT.
if [ "${GRUB_CMDLINE_LINUX_XEN_REPLACE}" ]; then
  GRUB_CMDLINE_LINUX="${GRUB_CMDLINE_LINUX_XEN_REPLACE}"
fi
if [ "${GRUB_CMDLINE_LINUX_XEN_REPLACE_DEFAULT}" ]; then
  GRUB_CMDLINE_LINUX_DEFAULT="${GRUB_CMDLINE_LINUX_XEN_REPLACE_DEFAULT}"
fi

GRUBFS="`${grub_probe} --device ${GRUB_DEVICE} --target=fs 2>/dev/null || true`"

if [ x"$GRUBFS" = x ]; then
    GRUBFS="$(stat -f --printf=%T /)"
fi

case x"$GRUBFS" in
    xbtrfs)
	rootsubvol="`make_system_path_relative_to_its_root /`"
	rootsubvol="${rootsubvol#/}"
	if [ "x${rootsubvol}" != x ]; then
	    GRUB_CMDLINE_LINUX="rootflags=subvol=${rootsubvol} ${GRUB_CMDLINE_LINUX}"
	fi;;
    xzfs)
	rpool=`${grub_probe} --device ${GRUB_DEVICE} --target=fs_label 2>/dev/null || true`
	bootfs="`make_system_path_relative_to_its_root / | sed -e "s,@$,,"`"
	LINUX_ROOT_DEVICE="ZFS=${rpool}${bootfs}"
	;;
esac

# A wrapper for GRUB's master compatible with GRUB releases.
version_find_latest ()
{
  printf "%s\n" "$@" | version_sort | tail -1
}

title_correction_code=

linux_entry ()
{
  os="$1"
  version="$2"
  xen_version="$3"
  type="$4"
  args="$5"
  xen_args="$6"
  if [ -z "$boot_device_id" ]; then
      boot_device_id="$(grub_get_device_id "${GRUB_DEVICE}")"
  fi
  if [ x$type != xsimple ] ; then
      if [ x$type = xrecovery ] ; then
	  title="$(gettext_printf "AEM %s boot, with Xen %s and Linux %s (recovery mode)" "${os}" "${xen_version}" "${version}")"
      else
	  title="$(gettext_printf "AEM %s boot, with Xen %s and Linux %s" "${os}" "${xen_version}" "${version}")"
      fi
      replacement_title="$(echo "Advanced options with AEM boot for ${OS}" | sed 's,>,>>,g')>$(echo "$title" | sed 's,>,>>,g')"
      if [ x"Xen ${xen_version}>$title" = x"$GRUB_ACTUAL_DEFAULT" ]; then
         quoted="$(echo "$GRUB_ACTUAL_DEFAULT" | grub_quote)"
         title_correction_code="${title_correction_code}if [ \"x\$default\" = '$quoted' ]; then default='$(echo "$replacement_title" | grub_quote)'; fi;"
         grub_warn "$(gettext_printf "Please don't use old title \`%s' for GRUB_DEFAULT, use \`%s' (for versions before 2.00) or \`%s' (for 2.00 or later)" "$GRUB_ACTUAL_DEFAULT" "$replacement_title" "gnulinux-advanced-$boot_device_id>gnulinux-$version-$type-$boot_device_id")"
      fi
      echo "menuentry '$(echo "$title" | grub_quote)' ${CLASS} \$menuentry_id_option 'xen-gnulinux-$version-$type-$boot_device_id' {" | sed "s/^/$submenu_indentation/"
  else
      title="$(gettext_printf "AEM %s, with Xen hypervisor" "${os}")"
      echo "menuentry '$(echo "$title" | grub_quote)' ${CLASS} \$menuentry_id_option 'xen-gnulinux-simple-$boot_device_id' {" | sed "s/^/$submenu_indentation/"
  fi
  if [ x$type != xrecovery ] ; then
      save_default_entry | grub_add_tab | sed "s/^/$submenu_indentation/"
  fi

  tmessage="$(gettext_printf "Enabling slaunch ...")"
  xmessage="$(gettext_printf "Loading Xen %s ..." ${xen_version})"
  lmessage="$(gettext_printf "Loading Linux %s ..." ${version})"

  sed "s/^/$submenu_indentation/" << EOF
	echo	'$(echo "$tmessage" | grub_quote)'
	slaunch
EOF

  if [ -n "$efi_xen_cfg" ]; then
    smodule_dev="(\$root_dev)"
    # doing `chainloader ($esp_dev)/...` doesn't help Xen open volume's
    # filesystem because GRUB always associates root device with its handle, so
    # have to point root at ESP
    sed "s/^/$submenu_indentation/" << EOF
	set root="\$esp_dev"
	echo	'$(echo "$xmessage" | grub_quote)'
	chainloader	${rel_xen_dirname}/${xen_basename} ${basename}
EOF
  else
    smodule_dev=
    printf '%s\n' "${prepare_boot_cache}" | sed "s/^/$submenu_indentation/"
    sed "s/^/$submenu_indentation/" << EOF
	echo	'$(echo "$xmessage" | grub_quote)'
	multiboot2	${rel_xen_dirname}/${xen_basename} placeholder ${xen_args} no-real-mode edd=off
	echo	'$(echo "$lmessage" | grub_quote)'
	module2	${rel_dirname}/${basename} placeholder root=${linux_root_device_thisversion} ro ${args} aem.uuid=${GRUB_DEVICE_BOOT_UUID} rd.luks.key=/tmp/aem-keyfile rd.luks.crypttab=no
EOF

    if test -n "${initrd}"; then
      # TRANSLATORS: ramdisk isn't identifier. Should be translated.
      message="$(gettext_printf "Loading initial ramdisk ...")"
      sed "s/^/$submenu_indentation/" << EOF
	echo	'$(echo "$message" | grub_quote)'
	module2	${rel_dirname}/${initrd}
EOF
    fi
  fi

  if test -n "${sinit_module_list}" ; then
    for i in ${sinit_module_list} ; do
      sinit_module=`basename $i`
      message="$(gettext_printf "Loading SINIT module %s ..." ${sinit_module})"
      sed "s/^/$submenu_indentation/" << EOF
	echo	'$message'
	slaunch_module	${smodule_dev}/${sinit_module}
EOF
    done
  fi

  sed "s/^/$submenu_indentation/" << EOF
}
EOF
}

linux_list=`for i in /boot/vmlinu[xz]-* /vmlinu[xz]-* /boot/kernel-*; do
    if grub_file_is_not_garbage "$i"; then
    	basename=$(basename $i)
	version=$(echo $basename | sed -e "s,^[^0-9]*-,,g")
	dirname=$(dirname $i)
	config=
	for j in "${dirname}/config-${version}" "${dirname}/config-${alt_version}" "/etc/kernels/kernel-config-${version}" ; do
	    if test -e "${j}" ; then
		config="${j}"
		break
	    fi
	done
        if (grep -qx "CONFIG_XEN_DOM0=y" "${config}" 2> /dev/null || grep -qx "CONFIG_XEN_PRIVILEGED_GUEST=y" "${config}" 2> /dev/null); then echo -n "$i " ; fi
    fi
    done`
if [ "x${linux_list}" = "x" ] ; then
    exit 0
fi

file_is_not_xen_garbage () {
    case "$1" in
	*/xen-syms-*)
	    return 1;;
	*/xenpolicy-*)
	    return 1;;
	*/*.config)
	    return 1;;
	*/*.cfg)
	    return 1;;
	*)
	    return 0;;
    esac
}

# Ignore case of SINIT files
_shopt="$( shopt -p | grep -e nocaseglob -e extglob)"
shopt -s nocaseglob extglob
sinit_module_list=`for i in /boot/@(*SINIT*|SKL).BIN; do
  if grub_file_is_not_garbage "$i"; then
    echo "$i"
  fi
done`
eval "$_shopt"

prepare_boot_cache=
boot_device_id=

title_correction_code=

machine=`uname -m`

case "$machine" in
    i?86) GENKERNEL_ARCH="x86" ;;
    mips|mips64) GENKERNEL_ARCH="mips" ;;
    mipsel|mips64el) GENKERNEL_ARCH="mipsel" ;;
    arm*) GENKERNEL_ARCH="arm" ;;
    *) GENKERNEL_ARCH="$machine" ;;
esac

print_entries() {
    # Glob to get list of Xen binaries.
    xen_glob=$1
    # Extra indentation to add to menu entries in a submenu.
    submenu_indentation=$2

    xen_list=`for i in $xen_glob; do
        if grub_file_is_not_garbage "$i" && file_is_not_xen_garbage "$i" ; then echo -n "$i " ; fi
    done`

    is_first_entry=true
    is_first_efi_entry=true

    while [ "x${xen_list}" != "x" ] ; do
        list="${linux_list}"
        current_xen=`version_find_latest $xen_list`
        xen_basename=`basename ${current_xen}`
        xen_dirname=`dirname ${current_xen}`
        rel_xen_dirname=`make_system_path_relative_to_its_root $xen_dirname`
        xen_version=`echo $xen_basename | sed -e "s,.gz$,,g;s,^xen-,,g"`
        if [ -z "$boot_device_id" ]; then
            boot_device_id="$(grub_get_device_id "${GRUB_DEVICE}")"
        fi
        if [ "x$is_first_entry" != xtrue ]; then
            echo "	submenu '$(gettext_printf "Xen hypervisor, version %s with AEM boot" "${xen_version}" | grub_quote)' \$menuentry_id_option 'xen-hypervisor-$xen_version-$boot_device_id' {"
        fi

        efi_xen_cfg=
        if echo "${current_xen}" | grep -qi '.efi$'; then
            efi_xen_cfg=`echo ${current_xen} | sed -e "s,\\.efi\$,\\.cfg,"`
        fi

        while [ "x$list" != "x" ] ; do
            linux=`version_find_latest $list`
            gettext_printf "Found linux image: %s\n" "$linux" >&2
            basename=`basename $linux`
            dirname=`dirname $linux`
            rel_dirname=`make_system_path_relative_to_its_root $dirname`
            version=`echo $basename | sed -e "s,^[^0-9]*-,,g"`
            alt_version=`echo $version | sed -e "s,\.old$,,g"`
            linux_root_device_thisversion="${LINUX_ROOT_DEVICE}"

            initrd=
            for i in "initrd.img-${version}" "initrd-${version}.img" "initrd-${version}.gz" \
               "initrd-${version}" "initramfs-${version}.img" \
               "initrd.img-${alt_version}" "initrd-${alt_version}.img" \
               "initrd-${alt_version}" "initramfs-${alt_version}.img" \
               "initramfs-genkernel-${version}" \
               "initramfs-genkernel-${alt_version}" \
               "initramfs-genkernel-${GENKERNEL_ARCH}-${version}" \
               "initramfs-genkernel-${GENKERNEL_ARCH}-${alt_version}" ; do
                if test -e "${dirname}/${i}" ; then
                    initrd="$i"
                    break
                fi
            done
            if test -n "${initrd}" ; then
                gettext_printf "Found initrd image: %s\n" "${dirname}/${initrd}" >&2
            else
        # "UUID=" magic is parsed by initrds.  Since there's no initrd, it can't work here.
                linux_root_device_thisversion=${GRUB_DEVICE}
            fi

            if [ -n "$efi_xen_cfg" ]; then
              cp "${linux}" "${xen_dirname}/aem-${basename}"

              cat >> "$efi_xen_cfg" << EOF
    [${basename}]
    options=placeholder ${xen_args} no-real-mode edd=off
    kernel=aem-${basename} placeholder root=${linux_root_device_thisversion} ro ${args} aem.uuid=${GRUB_DEVICE_BOOT_UUID} rd.luks.key=/tmp/aem-keyfile rd.luks.crypttab=no
EOF

              if test -n "${initrd}" ; then
                cp "${dirname}/${initrd}" "${xen_dirname}/aem-${initrd}"
                cat >> "$efi_xen_cfg" << EOF
    ramdisk=aem-${initrd}
EOF
              fi
            fi

            if [ "x$is_first_entry" = xtrue ]; then
                linux_entry "${OS}" "${version}" "${xen_version}" simple \
                    "${GRUB_CMDLINE_LINUX} ${GRUB_CMDLINE_LINUX_DEFAULT}" "${GRUB_CMDLINE_XEN} ${GRUB_CMDLINE_XEN_DEFAULT}"

                submenu_indentation="$submenu_indentation$grub_tab"

                if [ -z "$boot_device_id" ]; then
                    boot_device_id="$(grub_get_device_id "${GRUB_DEVICE}")"
                fi
                # TRANSLATORS: %s is replaced with an OS name
                echo "submenu '$(gettext_printf "Advanced options with AEM boot for %s (with Xen hypervisor)" "${OS}" | grub_quote)' \$menuentry_id_option 'gnulinux-advanced-$boot_device_id' {"
            echo "	submenu '$(gettext_printf "Xen hypervisor, version %s" "${xen_version}" | grub_quote)' \$menuentry_id_option 'xen-hypervisor-$xen_version-$boot_device_id' {"
            fi
            is_first_entry=false

            linux_entry "${OS}" "${version}" "${xen_version}" advanced \
                "${GRUB_CMDLINE_LINUX} ${GRUB_CMDLINE_LINUX_DEFAULT}" "${GRUB_CMDLINE_XEN} ${GRUB_CMDLINE_XEN_DEFAULT}"
            if [ "x${GRUB_DISABLE_RECOVERY}" != "xtrue" ]; then
                linux_entry "${OS}" "${version}" "${xen_version}" recovery \
                    "single ${GRUB_CMDLINE_LINUX}" "${GRUB_CMDLINE_XEN}"
            fi

            list=`echo $list | tr ' ' '\n' | grep -vx $linux | tr '\n' ' '`
        done
        if [ x"$is_first_entry" != xtrue ]; then
            echo '	}'
        fi

        xen_list=`echo $xen_list | tr ' ' '\n' | grep -vx $current_xen | tr '\n' ' '`
    done

    # If at least one kernel was found, then we need to
    # add a closing '}' for the submenu command.
    if [ x"$is_first_entry" != xtrue ]; then
        echo '}'
    fi
}

# cleanup previous AEM UEFI installations (-f is to account for unexpanded globs)
rm -f /boot/efi/EFI/qubes/xen-*.cfg /boot/efi/EFI/qubes/aem-*

prepare_boot_cache="$(prepare_grub_to_access_device ${GRUB_DEVICE_BOOT} | grub_add_tab)"

# In UEFI case aem/ directory is located on /boot drive, not on /boot/efi
cat << EOF
if [ "\$grub_platform" = "efi" ]; then
${grub_tab}set esp_dev="\$root"
${prepare_boot_cache}
${grub_tab}set root_dev="\$root"
fi
EOF

echo "if [ -d /aem/ ]; then"

echo 'if [ "$grub_platform" = "pc" -o "$grub_platform" = "" ]; then'
print_entries '/boot/xen*' "${grub_tab}"
echo 'elif [ "$grub_platform" = "efi" ]; then'
print_entries '/boot/efi/EFI/qubes/xen-*.efi' "${grub_tab}"
echo 'fi'

echo "$title_correction_code"

echo fi
